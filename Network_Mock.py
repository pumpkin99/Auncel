
import networkx as nx
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import csv
import pickle



def network_gen_ln_topo(capacity_factor):
    '''
    To simulate a payment channel network by Lighting Network topology.
    The topology comes from the snapshot of LN topology on 2021-03-31 (from https://ln.bigsun.xyz/),
    which contains 10,529 nodes and 38,910 channels.
    :param capacity_factor: a larger factor represents the larger channel capacity for each channel
    :return:
    '''

    # Generate a bidirectional graph with bi_edges
    bi_G = nx.DiGraph()

    ln_topo_file = './data/graph/lightning_topology.txt'
    with open(ln_topo_file, "r") as f:
        for line in f.readlines():
            tmp = line.split()
            u = int(tmp[0]) # node u
            v = int(tmp[1]) # node v
            cap = int(tmp[2])
            if cap < 10000:
                if cap <5000:
                    cap = cap * 10
                cap = cap * 200

            capacity = int(cap * capacity_factor) # capacity multiply the capacity factor
            capacity += capacity % 2
            bi_G.add_edge(u, v, weight= (capacity // 2))
            bi_G.add_edge(v, u, weight= (capacity // 2))

    file_path = './data/network/lightning_network/lightning_network_with_capacity_factor' + str(capacity_factor) + '.edgelist'
    with open(file_path, "wb") as f:
        pickle.dump(bi_G, f)
    return bi_G
    # nx.draw_networkx(bi_G)
    # plt.show()
    # print(bi_G.edges(data=True))




def network_gen_er_graph_v2(node_nb=16083, prob=0.0006):
    '''
    To simulate a payment channel network by Erdos Renyi Random Graph
    :param node_nb: number of nodes of the graph
    :param prob: Edge density: Between 0 and 1
    :return:
    '''

    # Generate an Erdos Renyi Random Graph with 'node_nb' nodes and probability 'prob' of an edge
    G = nx.erdos_renyi_graph(node_nb, prob)

    # Generate a bidirectional graph with bi_edges
    bi_G = nx.DiGraph()

    # Adding edges (saved in bi_edges) to the graph with random weights
    for edge in G.edges:

        # sampling the capacity for each channel by Gaussian distribution
        mu_ = 6900000  # expected capacity (satoshi) for channel, data come from https://1ml.com/statistics
        sigma_ = 2000000 # deviation
        weight = np.random.normal(mu_, sigma_)
        bi_G.add_edge(edge[0], edge[1], weight=weight//2)
        bi_G.add_edge(edge[1], edge[0], weight=weight//2)

        # nx.draw_networkx(G)
        # plt.show()

        # nx.draw_networkx(bi_G)
        # plt.show()
        # print(bi_G.edges(data=True))

        # write edgelist to grid.edgelist
        # nx.write_edgelist(bi_G, path="./data/network/graph.edgelist", delimiter=":")


    # save the graph to file
    file_path = './data/network/ER_graph/nodes' + str(node_nb) + '_prob' + str(prob) + '_ER_network.edgelist'
    with open(file_path, "wb") as f:
        pickle.dump(bi_G, f)

    print('Successfully generate network')
    print('number of nodes: ' + str(len(bi_G.nodes)))
    print('number of channels: ' + str(len(bi_G.edges)/2))
    print('graph is connected: ' + str(nx.is_connected(G)))
    print('number of connected components: ' + str(nx.number_connected_components(G)))

    return bi_G



def load_network(topo='LN_topo', capacity_factor=1, node_nb=16083, prob=0.0006):
    '''
    To load a generated network from file.
    Param 'topo' specify a network topology: is either 'LN_topo' or 'ER_graph',
    'LN_topo' denotes the network generated by lighting network

    'ER_graph' denotes the network generated by Erdos Renyi Random Graph
    with nodes 'node_nb' and edge probability 'prob'.

    the parameters 'node_nb' and 'prob' are valid only when topo is 'ER_graph'
    '''
    if topo == 'LN_topo':
        file_path = './data/network/lightning_network/lightning_network_with_capacity_factor' + str(capacity_factor) + '.edgelist'
        with open(file_path, "rb") as f:
            G = pickle.load(f)
            return G

    elif topo == 'ER_graph':
        # read edgelist from file
        # file_path = Constant.network_graph
        # file path saving network graph
        file_path = './data/network/ER_graph/nodes' + str(node_nb) + '_prob' + str(prob) + '_ER_network.edgelist'
        with open(file_path, "rb") as f:
            G = pickle.load(f)
            return G
    else:
        print('ERROR: An invalid topology is specified!')
        return None




if __name__ == '__main__':


    '''
    To generate network by lightning network topology with capacity factor
    inspired by paper "Shaduf: Non-Cycle Payment Channel Rebalancing"
    '''
    # for capacity_factor in range(1,26,1):
    #     network_gen_ln_topo(capacity_factor)


    '''
    To generate the network by ER random graph
    '''
    network_gen_er_graph_v2(node_nb=16083, prob=0.0006)


    '''
    load the network
    Param 'topo' specify a network topology: is either 'LN_topo' or 'ER_graph',
    param 'capacity_factor' is only valid when topo='LN_topo'
    params 'node_nb' and 'prob' are valid only when topo='ER_graph'
    '''
    # G = load_network(topo='LN_topo', capacity_factor=10, node_nb=16083, prob=0.0006)
    #
    # print('node number:' + str(len(G.nodes)))
    # print('channel number:' + str(int(len(G.edges) / 2)))
    # print(G.edges(data=True))

